[gd_scene load_steps=9 format=2]

[ext_resource path="res://Enemy/GenericEnemy.tscn" type="PackedScene" id=1]
[ext_resource path="res://Enemy/Penguin/Penguin.gd" type="Script" id=2]
[ext_resource path="res://Enemy/Penguin/Pingouin_Standing.png" type="Texture2D" id=3]
[ext_resource path="res://Enemy/Penguin/Pingouin_Moving.png" type="Texture2D" id=4]

[sub_resource type="SpriteFrames" id=1]
animations = [ {
"frames": [ ExtResource( 4 ), ExtResource( 3 ) ],
"loop": true,
"name": "default",
"speed": 5.0
} ]

[sub_resource type="Animation" id=2]
resource_name = "Idle"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("SpriteContainer/Sprite2D:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PackedFloat32Array( 0, 0.5 ),
"transitions": PackedFloat32Array( 1, 1 ),
"update": 0,
"values": [ Vector2( 0.0655048, -53.9736 ), Vector2( 0.066, -50.974 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("SpriteContainer/Sprite2D:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PackedFloat32Array( 0 ),
"transitions": PackedFloat32Array( 1 ),
"update": 0,
"values": [ 0.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("SpriteContainer/Sprite2D:frame")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PackedFloat32Array( 0 ),
"transitions": PackedFloat32Array( 1 ),
"update": 1,
"values": [ 1 ]
}

[sub_resource type="Animation" id=3]
resource_name = "Walking"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("SpriteContainer/Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PackedFloat32Array( 0 ),
"transitions": PackedFloat32Array( 1 ),
"update": 1,
"values": [ 0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("SpriteContainer/Sprite2D:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PackedFloat32Array( 0 ),
"transitions": PackedFloat32Array( 1 ),
"update": 0,
"values": [ Vector2( 0.066, -40 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("SpriteContainer/Sprite2D:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PackedFloat32Array( 0, 0.5 ),
"transitions": PackedFloat32Array( 1, 1 ),
"update": 0,
"values": [ -6.0, 6.0 ]
}

[sub_resource type="RectangleShape2D" id=4]

[node name="Penguin" instance=ExtResource( 1 )]
scale = Vector2( 1.3, 1.3 )
script = ExtResource( 2 )

[node name="SpriteContainer" parent="." index="0"]
position = Vector2( 0, -0.201094 )

[node name="Sprite2D" parent="SpriteContainer" index="0"]
position = Vector2( 0.0655048, -53.9736 )
scale = Vector2( 0.219714, 0.219714 )
frames = SubResource( 1 )
frame = 1

[node name="BodyCollider" parent="." index="1"]
position = Vector2( 0, -9.5 )

[node name="LeftWallCollider" parent="LeftWallDetector" index="0"]
position = Vector2( -60, -9.6 )

[node name="RightWallCollider" parent="RightWallDetector" index="0"]
position = Vector2( 60, -9.6 )

[node name="AnimationPlayer" parent="." index="5"]
anims/Idle = SubResource( 2 )
anims/Walking = SubResource( 3 )

[node name="HitBoxCollider" parent="HitBox" index="0"]
position = Vector2( 0, -27 )
scale = Vector2( 2.9, 1.75 )

[node name="LeftCliffDetector" type="Area2D" parent="." index="7"]
collision_layer = 0

[node name="LeftCliffCollider" type="CollisionShape2D" parent="LeftCliffDetector" index="0"]
position = Vector2( -25, 12 )
shape = SubResource( 4 )

[node name="RightCliffDetector" type="Area2D" parent="." index="8"]
collision_layer = 0

[node name="RightCliffCollider" type="CollisionShape2D" parent="RightCliffDetector" index="0"]
position = Vector2( 25, 12 )
shape = SubResource( 4 )
[connection signal="body_exited" from="LeftCliffDetector" to="." method="_on_LeftCliffDetector_body_exited"]
[connection signal="body_exited" from="RightCliffDetector" to="." method="_on_RightCliffDetector_body_exited"]
