[gd_scene load_steps=14 format=2]

[ext_resource path="res://Terrain/Cascade/CascadeSprite.gd" type="Script" id=1]
[ext_resource path="res://icon.png" type="Texture2D" id=2]
[ext_resource path="res://Terrain/Cascade/white_circle.png" type="Texture2D" id=3]
[ext_resource path="res://Terrain/Cascade/Cascade.gd" type="Script" id=4]

[sub_resource type="Shader" id=1]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/2d-waterfall

Feel free to improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform vec2 scale; // Used for sprite script. Don't edit this value in the inspector.
uniform float zoom; // Used for sprite script. Don't edit this value in the inspector.

uniform sampler2D refraction_map;
uniform sampler2D water_mask;

uniform vec2 gap_stretch = vec2(0.8, 0.05);
uniform vec2 refraction_stretch = vec2(2.0, 0.8);
uniform float refraction_strength : hint_range(0.0, 0.1) = 0.02;

uniform vec4 water_tint : source_color = vec4(0.2, 0.6, 1.0, 0.1);
uniform vec4 water_highlight : source_color = vec4(1.0, 1.0, 1.0, 0.3);
uniform float speed = 1.0;
uniform float flow_gaps : hint_range(0.0, 1.0) = 0.33;
uniform float highlight_width : hint_range(0.0, 0.3) = 0.02;

uniform float bottom_foam_threshold = 0.05;

void fragment()
{
	// Get the two noise textures and make them move on the y axis. The gaps move twice as fast as the refraction, but you can tweak this by changing (speed * 0.5)
	vec2 refraction_offset = texture(refraction_map, vec2(UV.x, UV.y + -TIME * speed * 0.5) * scale * refraction_stretch).xy;
	vec2 gap_mask = texture(water_mask, vec2(UV.x, UV.y + -TIME * speed) * scale * gap_stretch).xy;
	
	// Set values between -0.5 and 0.5 (instead of 0 and 1). Otherwise the reflection will move whith increased refraction_strength
	refraction_offset -= 0.5; 
	
	// Get the screen texture and distort it
	vec4 refraction = texture(SCREEN_TEXTURE, SCREEN_UV - refraction_offset * refraction_strength * zoom);
	
	
	// Create holes and apply colors and textures //
	
	vec4 color = vec4(1.0);
	
	// Define what values will be the water highlight color (the gap border)
	float inner_edge = flow_gaps + highlight_width;
	
	// See if the pixel is within the edges range and use the water colors alpha to blend between showing color or refraction texture.
	if (gap_mask.x < inner_edge)
	{
		color.rgb = mix(refraction.rgb, water_highlight.rgb, water_highlight.a);
	}
	else
	{
		color.rgb = mix(refraction.rgb, water_tint.rgb, water_tint.a);
	}
	
	// If the value is below the gap threshhold make it transparent (a gap)
	if (gap_mask.x < flow_gaps)
	{
		color.a = 0.0;
	}
	
	
	// Crate Edge Shape //
	
	// Set the shape for the top and bottom edges. Use water_mask as shape but with other values to flatten it out horizontally. 
	vec2 water_edge = texture(water_mask, vec2(UV.x, UV.y + -TIME * 0.1) * scale * vec2(0.15, 0.6)).xy;
	water_edge -= 0.5;
	
	// Use the same mask as for the gaps for left and right edge.
	vec2 vertical_edge_mask = gap_mask - 0.5;
	
	// Adding foam to the botttom
	color = mix(vec4(1.0), color, step(UV.y + water_edge.y * 0.1, 1.0 - bottom_foam_threshold));  // Bottom foam
	
	// Apply the new masks to the edges. This will make the wobble effect.
	
	//color.a = mix(0.0, color.a, step(UV.x + vertical_edge_mask.x * 0.2, 0.995)); // Right edge
	//color.a = mix(color.a, 0.0, step(UV.x - vertical_edge_mask.x * 0.2, 0.005)); // Left edge
	
	color.a = mix(0.0, color.a, step(UV.y + water_edge.y * 0.05, 1.0 - bottom_foam_threshold / 3.0)); // Bottom edge
	//color.a = mix(color.a, 0.0, step(UV.y - water_edge.y * 0.05, 0.005)); // Top edge
	
	COLOR = color;
}"

[sub_resource type="FastNoiseLite" id=2]
seed = 50
period = 56.0
persistence = 1.0
lacunarity = 3.0

[sub_resource type="NoiseTexture" id=3]
noise = SubResource( 2 )

[sub_resource type="FastNoiseLite" id=4]
seed = 50
period = 56.0
persistence = 1.0
lacunarity = 3.0

[sub_resource type="NoiseTexture" id=5]
noise = SubResource( 4 )

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 1 )
shader_param/scale = Vector2( 1, 5 )
shader_param/zoom = 1.6385
shader_param/gap_stretch = Vector2( 0.8, 0.05 )
shader_param/refraction_stretch = Vector2( 2, 0.8 )
shader_param/refraction_strength = 0.02
shader_param/water_tint = Color( 0.235294, 0.74902, 0.941176, 0.745098 )
shader_param/water_highlight = Color( 1, 1, 1, 0.3 )
shader_param/speed = 1.2
shader_param/flow_gaps = 0.33
shader_param/highlight_width = 0.02
shader_param/bottom_foam_threshold = 0.025
shader_param/refraction_map = SubResource( 3 )
shader_param/water_mask = SubResource( 5 )

[sub_resource type="Curve" id=7]
min_value = 0.25
max_value = 0.75
_data = [ Vector2( 0, 0.75 ), 0.0, 0.0, 0, 0, Vector2( 0.995968, 0.25 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=8]
curve = SubResource( 7 )

[sub_resource type="ParticleProcessMaterial" id=9]
emission_shape = 2
emission_box_extents = Vector3( 128, 0, 0 )
flag_disable_z = true
direction = Vector3( 0, -1, 0 )
gravity = Vector3( 0, 98, 0 )
initial_velocity = 125.0
orbit_velocity = 0.0
orbit_velocity_random = 0.0
scale_curve = SubResource( 8 )

[node name="CascadeRoot" type="Node2D"]
script = ExtResource( 4 )

[node name="CascadeSprite" type="Sprite2D" parent="."]
material = SubResource( 6 )
scale = Vector2( 1, 3 )
texture = ExtResource( 2 )
normal_map = ExtResource( 2 )
script = ExtResource( 1 )

[node name="EndOfCascade" type="Node2D" parent="CascadeSprite"]
position = Vector2( 0, 64 )
scale = Vector2( 1, 0.275862 )

[node name="GPUParticles2D" type="GPUParticles2D" parent="."]
position = Vector2( 0, 192 )
scale = Vector2( 0.5, 0.5 )
amount = 80
lifetime = 0.63
process_material = SubResource( 9 )
texture = ExtResource( 3 )
[connection signal="item_rect_changed" from="CascadeSprite" to="CascadeSprite" method="_on_Cascade_item_rect_changed"]
